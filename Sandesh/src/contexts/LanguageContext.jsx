import { createContext, useContext, useState, useEffect } from 'react';
import { translationAPI } from '@/services/translationApi';

const LanguageContext = createContext();

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};

// Comprehensive Indian language translations
const translations = {
  en: {
    // Navigation
    features: "Features",
    contact: "Contact Us", 
    login: "Login",
    signup: "Sign Up",
    dashboard: "Dashboard",
    logout: "Logout",
    welcome: "Welcome",
    
    // Landing Page
    heroTitle: "SMART AGRICULTURE",
    heroSubtitle: "Welcome to the Future of Farming",
    getStarted: "Get Started Today",
    whyChoose: "Why Choose HerbiProof?",
    whyChooseDesc: "Empowering farmers with smart technology to connect directly with buyers, manage crops efficiently, and grow agricultural businesses.",
    batchManagement: "Batch Management",
    batchManagementDesc: "Easily track and manage your crop batches from planting to harvest. Monitor progress and maintain detailed records.",
    ratingSystem: "Rating System", 
    ratingSystemDesc: "Build your reputation with our transparent rating system. Quality produce leads to better ratings and more orders.",
    sustainableGrowth: "Sustainable Growth",
    sustainableGrowthDesc: "Promote sustainable farming practices with our eco-friendly guidelines and certification programs.",
    readyToTransform: "Ready to Transform Your Farming Business?",
    readyToTransformDesc: "Join thousands of farmers who are already using HerbiProof to increase their profits and streamline their operations.",
    startJourney: "Start Your Journey",
    
    // Auth
    loginTitle: "Welcome Back",
    loginSubtitle: "Sign in to your account",
    signupTitle: "Create Account", 
    signupSubtitle: "Join our farming community",
    email: "Email",
    password: "Password",
    name: "Full Name",
    phone: "Phone Number",
    selectRole: "Select Your Role",
    farmer: "Farmer",
    distributor: "Distributor",
    retailer: "Retailer",
    farmerDesc: "Grow and sell agricultural products",
    distributorDesc: "Distribute products to retailers",
    retailerDesc: "Sell products to consumers",
    signIn: "Sign In",
    createAccount: "Create Account",
    dontHaveAccount: "Don't have an account?",
    alreadyHaveAccount: "Already have an account?",
    backToHome: "Back to Home"
  },
  hi: {
    features: "рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдВ",
    contact: "рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ", 
    login: "рд▓реЙрдЧрд┐рди",
    signup: "рд╕рд╛рдЗрди рдЕрдк",
    dashboard: "рдбреИрд╢рдмреЛрд░реНрдб",
    logout: "рд▓реЙрдЧрдЖрдЙрдЯ",
    welcome: "рд╕реНрд╡рд╛рдЧрдд",
    heroTitle: "рд╕реНрдорд╛рд░реНрдЯ рдХреГрд╖рд┐",
    heroSubtitle: "рдХреГрд╖рд┐ рдХреЗ рднрд╡рд┐рд╖реНрдп рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ",
    getStarted: "рдЖрдЬ рд╣реА рд╢реБрд░реВ рдХрд░реЗрдВ",
    whyChoose: "рд╣рд░реНрдмреАрдкреНрд░реВрдл рдХреНрдпреЛрдВ рдЪреБрдиреЗрдВ?",
    whyChooseDesc: "рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЛ рд╕реНрдорд╛рд░реНрдЯ рддрдХрдиреАрдХ рдХреЗ рд╕рд╛рде рд╕рд╢рдХреНрдд рдмрдирд╛рдирд╛ рддрд╛рдХрд┐ рд╡реЗ рд╕реАрдзреЗ рдЦрд░реАрджрд╛рд░реЛрдВ рд╕реЗ рдЬреБрдбрд╝ рд╕рдХреЗрдВред",
    batchManagement: "рдмреИрдЪ рдкреНрд░рдмрдВрдзрди",
    batchManagementDesc: "рд░реЛрдкрдг рд╕реЗ рдХрдЯрд╛рдИ рддрдХ рдЕрдкрдиреЗ рдлрд╕рд▓ рдмреИрдЪреЛрдВ рдХреЛ рдЖрд╕рд╛рдиреА рд╕реЗ рдЯреНрд░реИрдХ рдХрд░реЗрдВред",
    ratingSystem: "рд░реЗрдЯрд┐рдВрдЧ рд╕рд┐рд╕реНрдЯрдо", 
    ratingSystemDesc: "рд╣рдорд╛рд░реА рдкрд╛рд░рджрд░реНрд╢реА рд░реЗрдЯрд┐рдВрдЧ рдкреНрд░рдгрд╛рд▓реА рдХреЗ рд╕рд╛рде рдЕрдкрдиреА рдкреНрд░рддрд┐рд╖реНрдард╛ рдмрдирд╛рдПрдВред",
    sustainableGrowth: "рдЯрд┐рдХрд╛рдК рд╡рд┐рдХрд╛рд╕",
    sustainableGrowthDesc: "рдкрд░реНрдпрд╛рд╡рд░рдг-рдЕрдиреБрдХреВрд▓ рджрд┐рд╢рд╛рдирд┐рд░реНрджреЗрд╢реЛрдВ рдХреЗ рд╕рд╛рде рдЯрд┐рдХрд╛рдК рдХреГрд╖рд┐ рдкреНрд░рдерд╛рдУрдВ рдХреЛ рдмрдврд╝рд╛рд╡рд╛ рджреЗрдВред",
    readyToTransform: "рдЕрдкрдиреЗ рдХреГрд╖рд┐ рд╡реНрдпрд╡рд╕рд╛рдп рдХреЛ рдмрджрд▓рдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд╣реИрдВ?",
    readyToTransformDesc: "рд╣рдЬрд╛рд░реЛрдВ рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЗ рд╕рд╛рде рдЬреБрдбрд╝реЗрдВ рдЬреЛ рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рд╣рд░реНрдмреАрдкреНрд░реВрдл рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд░рд╣реЗ рд╣реИрдВред",
    startJourney: "рдЕрдкрдиреА рдпрд╛рддреНрд░рд╛ рд╢реБрд░реВ рдХрд░реЗрдВ",
    loginTitle: "рд╡рд╛рдкрд╕ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ",
    loginSubtitle: "рдЕрдкрдиреЗ рдЦрд╛рддреЗ рдореЗрдВ рд╕рд╛рдЗрди рдЗрди рдХрд░реЗрдВ",
    signupTitle: "рдЦрд╛рддрд╛ рдмрдирд╛рдПрдВ", 
    signupSubtitle: "рд╣рдорд╛рд░реЗ рдХреГрд╖рд┐ рд╕рдореБрджрд╛рдп рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реЛрдВ",
    email: "рдИрдореЗрд▓",
    password: "рдкрд╛рд╕рд╡рд░реНрдб",
    name: "рдкреВрд░рд╛ рдирд╛рдо",
    phone: "рдлреЛрди рдирдВрдмрд░",
    selectRole: "рдЕрдкрдиреА рднреВрдорд┐рдХрд╛ рдЪреБрдиреЗрдВ",
    farmer: "рдХрд┐рд╕рд╛рди",
    distributor: "рд╡рд┐рддрд░рдХ",
    retailer: "рдЦреБрджрд░рд╛ рд╡рд┐рдХреНрд░реЗрддрд╛",
    farmerDesc: "рдХреГрд╖рд┐ рдЙрддреНрдкрд╛рдж рдЙрдЧрд╛рдПрдВ рдФрд░ рдмреЗрдЪреЗрдВ",
    distributorDesc: "рдЦреБрджрд░рд╛ рд╡рд┐рдХреНрд░реЗрддрд╛рдУрдВ рдХреЛ рдЙрддреНрдкрд╛рдж рд╡рд┐рддрд░рд┐рдд рдХрд░реЗрдВ",
    retailerDesc: "рдЙрдкрднреЛрдХреНрддрд╛рдУрдВ рдХреЛ рдЙрддреНрдкрд╛рдж рдмреЗрдЪреЗрдВ",
    signIn: "рд╕рд╛рдЗрди рдЗрди",
    createAccount: "рдЦрд╛рддрд╛ рдмрдирд╛рдПрдВ",
    dontHaveAccount: "рдЦрд╛рддрд╛ рдирд╣реАрдВ рд╣реИ?",
    alreadyHaveAccount: "рдкрд╣рд▓реЗ рд╕реЗ рдЦрд╛рддрд╛ рд╣реИ?",
    backToHome: "рдореБрдЦреНрдп рдкреГрд╖реНрда рдкрд░ рд╡рд╛рдкрд╕ рдЬрд╛рдПрдВ"
  }
};

export const LanguageProvider = ({ children }) => {
  const [currentLanguage, setCurrentLanguage] = useState('en');
  const [isLoading, setIsLoading] = useState(false);
  const [apiTranslations, setApiTranslations] = useState({});

  // Load saved language preference
  useEffect(() => {
    const savedLanguage = localStorage.getItem('herbiproof_language');
    if (savedLanguage && availableLanguages.some(lang => lang.code === savedLanguage)) {
      setCurrentLanguage(savedLanguage);
      
      // Load cached API translations if available
      if (savedLanguage !== 'en') {
        const cached = localStorage.getItem(`herbiproof_api_translations_${savedLanguage}`);
        if (cached) {
          try {
            setApiTranslations(JSON.parse(cached));
          } catch (error) {
            console.warn('Failed to parse cached translations:', error);
          }
        }
      }
    }
  }, []);

  // Change language and optionally load API translations
  const changeLanguage = async (languageCode) => {
    if (!availableLanguages.some(lang => lang.code === languageCode)) {
      console.warn(`Language ${languageCode} is not supported`);
      return;
    }

    setCurrentLanguage(languageCode);
    localStorage.setItem('herbiproof_language', languageCode);

    // If switching to English, clear API translations
    if (languageCode === 'en') {
      setApiTranslations({});
      return;
    }

    // If no hardcoded translations exist, try API
    if (!translations[languageCode]) {
      setIsLoading(true);
      try {
        const keys = Object.keys(translations.en);
        const newTranslations = await translationAPI.translateKeys(keys, languageCode, translations.en);
        setApiTranslations(newTranslations);
        localStorage.setItem(`herbiproof_api_translations_${languageCode}`, JSON.stringify(newTranslations));
      } catch (error) {
        console.error('Failed to load API translations:', error);
      } finally {
        setIsLoading(false);
      }
    }
  };

  // Get translation for current language
  const t = (key) => {
    // First check hardcoded translations
    const hardcodedTranslation = translations[currentLanguage]?.[key];
    if (hardcodedTranslation) {
      return hardcodedTranslation;
    }
    
    // Then check API translations
    const apiTranslation = apiTranslations[key];
    if (apiTranslation) {
      return apiTranslation;
    }
    
    // Fallback to English or key itself
    return translations.en[key] || key;
  };

  // Available languages - Indian regional languages only  
  const availableLanguages = [
    { code: 'en', name: 'English', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'hi', name: 'рд╣рд┐рдиреНрджреА', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'bn', name: 'ржмрж╛ржВрж▓рж╛', flag: 'ЁЯЗзЁЯЗй' },
    { code: 'te', name: 'р░др▒Жр░▓р▒Бр░Чр▒Б', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'ta', name: 'родрооро┐ро┤рпН', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'mr', name: 'рдорд░рд╛рдареА', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'gu', name: 'ркЧрлБркЬрк░рк╛ркдрлА', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'kn', name: 'р▓Хр▓ир│Нр▓ир▓б', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'ml', name: 'р┤ор┤▓р┤пр┤╛р┤│р┤В', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'pa', name: 'рикрй░риЬри╛римрйА', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'or', name: 'рмУрмбрм╝рм┐рмЖ', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'as', name: 'ржЕрж╕ржорзАржпрж╝рж╛', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'ur', name: '╪з╪▒╪п┘И', flag: 'ЁЯЗ╡ЁЯЗ░' },
    { code: 'ne', name: 'рдиреЗрдкрд╛рд▓реА', flag: 'ЁЯЗ│ЁЯЗ╡' },
    { code: 'si', name: 'р╖Гр╖Тр╢Вр╖Др╢╜', flag: 'ЁЯЗ▒ЁЯЗ░' }
  ];

  const value = {
    currentLanguage,
    changeLanguage,
    t,
    availableLanguages,
    isLoading
  };

  return (
    <LanguageContext.Provider value={value}>
      {children}
    </LanguageContext.Provider>
  );
};